import api, { route } from '@forge/api';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–µ–±-—Ä–µ—Å—É—Ä—Å–µ
export async function getProjectIssues(projectKey) {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞:', projectKey);

    try {
        // JQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
        const jql = `project = ${projectKey} ORDER BY created DESC`;

        // API –∑–∞–ø—Ä–æ—Å –∫ Jira
        const response = await api.asUser().requestJira(route`/rest/api/3/search`, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                jql: jql,
                fields: [
                    'summary',
                    'status',
                    'assignee',
                    'priority',
                    'duedate',
                    'created',
                    'updated'
                ],
                maxResults: 100
            })
        });

        const data = await response.json();
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.issues.length} –∑–∞–¥–∞—á`);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const issues = data.issues.map(issue => ({
            id: issue.id,
            key: issue.key,
            summary: issue.fields.summary,
            status: issue.fields.status.name,
            assignee: issue.fields.assignee ? {
                accountId: issue.fields.assignee.accountId,
                displayName: issue.fields.assignee.displayName,
                avatarUrl: issue.fields.assignee.avatarUrls['24x24']
            } : null,
            priority: {
                name: issue.fields.priority.name,
                id: issue.fields.priority.id
            },
            duedate: issue.fields.duedate,
            created: issue.fields.created,
            updated: issue.fields.updated
        }));

        return {
            success: true,
            data: issues,
            projectKey: projectKey
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

export async function getProjectUsers(projectKey) {
    console.log('üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞:', projectKey);

    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –∑–∞–¥–∞—á–∏
        const response = await api.asUser().requestJira(
            route`/rest/api/3/user/assignable/search?project=${projectKey}&maxResults=50`
        );

        const users = await response.json();
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const formattedUsers = users.map(user => ({
            accountId: user.accountId,
            displayName: user.displayName,
            emailAddress: user.emailAddress,
            avatarUrl: user.avatarUrls['24x24'],
            active: user.active
        }));

        return {
            success: true,
            data: formattedUsers
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        return {
            success: false,
            error: error.message
        };
    }
}