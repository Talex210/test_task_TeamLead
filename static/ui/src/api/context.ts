declare global {
    interface Window {
        AP?: {
            context: {
                getContext: (callback: (context: any) => void) => void;
            };
        };
    }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const isDevMode = process.env.VITE_DEV_MODE === 'true' ||
    process.env.NODE_ENV === 'development' ||
    !window.location.hostname.includes('atlassian');

let currentProjectKey: string | null = null;

export const initializeContext = async (): Promise<string> => {
    try {
        if (isDevMode) {
            console.log('üîß Dev Mode: –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –∫–æ–Ω—Ç–µ–∫—Å—Ç');
            currentProjectKey = 'SCRUM';
            return currentProjectKey;
        }

        if (window.AP && window.AP.context) {
            const context = await new Promise<any>((resolve) => {
                window.AP!.context.getContext((ctx: any) => {
                    resolve(ctx);
                });
            });

            if (context && context.jira && context.jira.project) {
                currentProjectKey = context.jira.project.key;
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞:', currentProjectKey);
                return currentProjectKey || 'SCRUM';
            }
        }

        // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        currentProjectKey = 'SCRUM';
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞:', currentProjectKey);
        return currentProjectKey;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
        currentProjectKey = 'SCRUM';
        return 'SCRUM';
    }
};

export const setCurrentProjectKey = (projectKey: string): string => {
    console.log(`üîÑ –°–º–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞: ${projectKey}`);
    currentProjectKey = projectKey;
    return currentProjectKey;
};

export const getCurrentProjectKey = (): string | null => currentProjectKey;
