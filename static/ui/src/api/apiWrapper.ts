// –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π mock —Ä–µ–∂–∏–º–∞

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const isDevMode = process.env.VITE_DEV_MODE === 'true' ||
    process.env.NODE_ENV === 'development' ||
    !window.location.hostname.includes('atlassian');

let forgeInvoke: any;
let forgeView: any;
let requestJira: any;

if (isDevMode) {
    // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock
    console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º mock –≤–µ—Ä—Å–∏—é Forge API');
    import('./forgeMock').then((mock) => {
        forgeInvoke = mock.mockForgeInvoke;
        forgeView = mock.mockForgeView;
    });
} else {
    // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Forge
    import('@forge/bridge').then((forge) => {
        forgeInvoke = forge.invoke;
        forgeView = forge.view;
        requestJira = forge.requestJira;
    });
}

export const apiWrapper = {
    async invoke(functionName: string, payload?: any): Promise<any> {
        if (isDevMode && forgeInvoke) {
            return forgeInvoke(functionName, payload);
        }

        if (!isDevMode && forgeInvoke) {
            return forgeInvoke(functionName, payload);
        }

        // Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        await new Promise(resolve => setTimeout(resolve, 100));

        if (isDevMode) {
            const { mockForgeInvoke } = await import('./forgeMock');
            return mockForgeInvoke(functionName, payload);
        } else {
            const { invoke } = await import('@forge/bridge');
            return invoke(functionName, payload);
        }
    },

    async getContext(): Promise<any> {
        if (isDevMode && forgeView) {
            return forgeView.getContext();
        }

        if (!isDevMode && forgeView) {
            return forgeView.getContext();
        }

        // Fallback
        if (isDevMode) {
            const { mockForgeView } = await import('./forgeMock');
            return mockForgeView.getContext();
        } else {
            const { view } = await import('@forge/bridge');
            return view.getContext();
        }
    },

    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    async makeJiraRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
        if (isDevMode) {
            // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
            console.log(`üîß Mock –∑–∞–ø—Ä–æ—Å –∫: ${endpoint}`);

            // –ú–∞–ø–∏–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ mock
            if (endpoint.includes('/search')) {
                const { mockForgeInvoke } = await import('./forgeMock');
                const response = await mockForgeInvoke('getProjectIssues', {
                    projectKey: 'SCRUM',
                    ...options
                });
                return response.data as T;
            }

            if (endpoint.includes('/user/search')) {
                const { mockForgeInvoke } = await import('./forgeMock');
                const response = await mockForgeInvoke('getProjectUsers', options);
                return response.data as T;
            }

            if (endpoint.includes('/project/search')) {
                const { mockForgeInvoke } = await import('./forgeMock');
                const response = await mockForgeInvoke('getProjects', options);
                return response.data as T;
            }

            // –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {} as T;
        } else {
            // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π requestJira
            if (!requestJira) {
                const { requestJira: realRequestJira } = await import('@forge/bridge');
                requestJira = realRequestJira;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ client.ts
            const response = await requestJira(endpoint, {
                method: 'GET',
                headers: {
                    Accept: 'application/json',
                    ...(options.body ? { 'Content-Type': 'application/json' } : {})
                },
                ...options
            });

            // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
            if (!response.ok) {
                throw new Error(`HTTP ${response.status} ${response.statusText} on ${endpoint}`);
            }

            if (response.status === 204 || response.status === 205) {
                return null as T;
            }

            const text = await response.text();
            if (!text || !text.trim()) {
                return null as T;
            }

            try {
                return JSON.parse(text) as T;
            } catch {
                return text as T;
            }
        }
    }
};

export default apiWrapper;
