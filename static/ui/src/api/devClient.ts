import { requestJira } from '@forge/bridge';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const isDevMode = process.env.VITE_DEV_MODE === 'true' ||
    process.env.NODE_ENV === 'development' ||
    !window.location.hostname.includes('atlassian');

console.log(`üîß DevClient: —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ = ${isDevMode}`);

async function parseResponseSafe(response: Response): Promise<unknown | null> {
    // 204/205 –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–ª–∞
    if (response.status === 204 || response.status === 205) {
        return null;
    }

    const contentType = response.headers.get('content-type') || '';
    const isJson = contentType.includes('application/json');

    // –ß–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç –æ–¥–∏–Ω —Ä–∞–∑, –¥–∞–ª—å—à–µ —Ä–µ—à–∞–µ–º ‚Äî –ø–∞—Ä—Å–∏—Ç—å JSON –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç/ null
    const text = await response.text();

    if (!text || !text.trim()) {
        return null;
    }

    if (isJson) {
        try {
            return JSON.parse(text);
        } catch {
            // –ï—Å–ª–∏ JSON —Å–ª–æ–º–∞–Ω ‚Äî –Ω–µ –∫–∏–¥–∞–µ–º SyntaxError –≤ UI
            return null;
        }
    }

    // –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –∏–Ω–æ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç
    return text;
}

// Mock —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ requestJira
const mockRequestJira = async (endpoint: string, options: RequestInit = {}) => {
    console.log(`üé≠ Mock Request: ${endpoint}`, options);

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, Math.random() * 500 + 200));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—É—Å—Ç—ã–º —Ç–µ–ª–æ–º –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    return new Response('{}', {
        status: 200,
        statusText: 'OK',
        headers: {
            'Content-Type': 'application/json'
        }
    });
};

export const makeJiraRequest = async <T>(endpoint: string, options: RequestInit = {}): Promise<T> => {
    try {
        console.log(`üì° –ó–∞–ø—Ä–æ—Å –∫ Jira API: ${endpoint}`);

        let response: Response;

        if (isDevMode) {
            // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock
            response = await mockRequestJira(endpoint, options);
        } else {
            // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π requestJira
            response = await requestJira(endpoint, {
                method: 'GET',
                headers: {
                    Accept: 'application/json',
                    // Content-Type —Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
                    ...(options.body ? { 'Content-Type': 'application/json' } : {})
                },
                ...options
            });
        }

        const data = await parseResponseSafe(response);

        if (!response.ok) {
            // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É
            const message =
                (typeof data === 'string' && data) ||
                (data && typeof data === 'object' && 'message' in (data as any) && String((data as any).message)) ||
                response.statusText ||
                'Unknown error';

            console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Jira API:', { status: response.status, body: data });
            throw new Error(`HTTP ${response.status} ${response.statusText} on ${endpoint}: ${message}`);
        }

        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Jira API:', data ?? { status: response.status, note: 'no content' });
        return data as T;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Jira API:', error);
        throw error;
    }
};
