import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom/client';
import { CacheProvider } from '@emotion/react';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import { App } from './App';
import './styles/tokens.css';
import './styles/base.css';
import './styles/utilities.css';
import { createEmotionCache } from './mui/emotionCache';

const theme = createTheme();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const isDevMode = process.env.VITE_DEV_MODE === 'true' ||
    process.env.NODE_ENV === 'development' ||
    window.location.hostname === 'localhost' ||
    window.location.hostname === '127.0.0.1' ||
    !window.location.hostname.includes('atlassian');

console.log(`üîß –†–µ–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${isDevMode ? 'DEVELOPMENT' : 'PRODUCTION'}`);
console.log(`üåç Hostname: ${window.location.hostname}`);
console.log(`üîß VITE_DEV_MODE: ${process.env.VITE_DEV_MODE}`);
console.log(`üîß NODE_ENV: ${process.env.NODE_ENV}`);

const Root: React.FC = () => {
    const [cache, setCache] = useState<ReturnType<typeof createEmotionCache> | null>(null);
    const [isReady, setIsReady] = useState(false);

    useEffect(() => {
        let mounted = true;

        (async () => {
            try {
                if (isDevMode) {
                    console.log('üîß DEV MODE: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑ Forge Bridge');
                    // –í dev —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞—ë–º cache —Å—Ä–∞–∑—É –±–µ–∑ nonce
                    if (mounted) {
                        const created = createEmotionCache();
                        setCache(created);
                        setIsReady(true);
                    }
                } else {
                    console.log('üöÄ PROD MODE: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å Forge Bridge');

                    // –¢–æ–ª—å–∫–æ –≤ production —Ä–µ–∂–∏–º–µ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å Forge
                    try {
                        const forgeModule = await import('@forge/bridge');
                        const ctx = await forgeModule.view.getContext();

                        let nonce: string | undefined;
                        if (ctx && typeof ctx.cspNonce === 'string') {
                            console.log('üîê CSP nonce –ø–æ–ª—É—á–µ–Ω –∏–∑ Forge –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
                            nonce = ctx.cspNonce;
                        } else {
                            console.warn('‚ö†Ô∏è CSP nonce –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Forge');
                        }

                        if (mounted) {
                            const created = createEmotionCache(nonce);
                            setCache(created);
                            setIsReady(true);
                        }
                    } catch (forgeError) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Forge Bridge, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ:', forgeError);

                        if (mounted) {
                            // Fallback: —Å–æ–∑–¥–∞—ë–º cache –±–µ–∑ nonce
                            const created = createEmotionCache();
                            setCache(created);
                            setIsReady(true);
                        }
                    }
                }
            } catch (e) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', e);

                if (mounted) {
                    // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    const created = createEmotionCache();
                    setCache(created);
                    setIsReady(true);
                }
            }
        })();

        return () => {
            mounted = false;
        };
    }, []);

    if (!cache || !isReady) {
        return (
            <div style={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                height: '100vh',
                fontSize: '18px',
                color: '#666',
                flexDirection: 'column',
                gap: '10px'
            }}>
                <div>
                    {isDevMode ? 'üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dev —Ä–µ–∂–∏–º–∞...' : 'üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Forge...'}
                </div>
                <div style={{ fontSize: '14px', opacity: 0.7 }}>
                    –†–µ–∂–∏–º: {isDevMode ? 'Development' : 'Production'}
                </div>
            </div>
        );
    }

    return (
        <CacheProvider value={cache}>
            <ThemeProvider theme={theme}>
                <App />
            </ThemeProvider>
        </CacheProvider>
    );
};

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Root />);
