// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Jira —á–µ—Ä–µ–∑ Forge
import { requestJira } from '@forge/bridge';
import type {
    JiraIssue,
    JiraUser,
    JiraProject,
    ApiResponse,
    ProjectIssuesResponse,
    AutoAssignResponse
} from './types/jira';
// –¢–∏–ø—ã –¥–ª—è Forge API
declare global {
    interface Window {
        AP?: {
            context: {
                getContext: (callback: (context: any) => void) => void;
            };
        };
    }
}

console.log('üåâ API Bridge –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
let currentProjectKey: string | null = null;

// –¢–∏–ø—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö API –æ—Ç–≤–µ—Ç–æ–≤ Jira
interface JiraSearchResponse {
    issues: Array<{
        id: string;
        key: string;
        fields: {
            summary: string;
            status: { name: string };
            assignee: {
                accountId: string;
                displayName: string;
                emailAddress?: string;
                avatarUrls: { '24x24': string };
            } | null;
            priority: { name: string; id: string };
            duedate: string | null;
            created: string;
            updated: string;
        };
    }>;
}

interface JiraUserResponse {
    accountId: string;
    displayName: string;
    emailAddress?: string;
    avatarUrls: { '24x24': string };
    active: boolean;
}

interface JiraProjectResponse {
    values: Array<{
        id: string;
        key: string;
        name: string;
        projectTypeKey: string;
    }>;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
const initializeContext = async (): Promise<string> => {
    try {
        // –í Forge –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ window
        if ((window as any).AP && (window as any).AP.context) {
            const context = await new Promise<any>((resolve) => {
                (window as any).AP.context.getContext((context: any) => {
                    resolve(context);
                });
            });

            if (context && context.jira && context.jira.project) {
                currentProjectKey = context.jira.project.key;
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞:', currentProjectKey);
                return currentProjectKey || 'SCRUM';
            }
        }

        // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        currentProjectKey = 'SCRUM';
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞:', currentProjectKey);
        return currentProjectKey;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
        currentProjectKey = 'SCRUM';
        return 'SCRUM';
    }
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Jira API
const makeJiraRequest = async <T>(endpoint: string, options: RequestInit = {}): Promise<T> => {
    try {
        console.log(`üì° –ó–∞–ø—Ä–æ—Å –∫ Jira API: ${endpoint}`);

        const response = await requestJira(endpoint, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            ...options
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Jira API:`, data);
        return data;

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Jira API:`, error);
        throw error;
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let mockIssues: JiraIssue[] = [
    {
        id: '10001',
        key: 'SCRUM-1',
        summary: '–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
        status: 'In Progress',
        assignee: {
            accountId: 'user1',
            displayName: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
            emailAddress: 'ivan@example.com',
            avatarUrl: 'https://via.placeholder.com/24',
            active: true
        },
        priority: { name: 'High', id: '1' },
        duedate: '2024-12-31',
        created: '2024-01-15T10:00:00.000Z',
        updated: '2024-01-20T15:30:00.000Z'
    },
    {
        id: '10002',
        key: 'SCRUM-2',
        summary: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
        status: 'To Do',
        assignee: null,
        priority: { name: 'Low', id: '4' },
        duedate: '2024-12-25',
        created: '2024-01-16T09:00:00.000Z',
        updated: '2024-01-16T09:00:00.000Z'
    },
    {
        id: '10003',
        key: 'SCRUM-3',
        summary: '–î–æ–±–∞–≤–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é',
        status: 'Done',
        assignee: {
            accountId: 'user2',
            displayName: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
            emailAddress: 'maria@example.com',
            avatarUrl: 'https://via.placeholder.com/24',
            active: true
        },
        priority: { name: 'Medium', id: '3' },
        duedate: null,
        created: '2024-01-10T14:00:00.000Z',
        updated: '2024-01-18T16:45:00.000Z'
    },
    {
        id: '10004',
        key: 'SCRUM-4',
        summary: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –º–µ–ª–∫–∏–µ –±–∞–≥–∏ –≤ UI',
        status: 'To Do',
        assignee: {
            accountId: 'user3',
            displayName: '–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤',
            emailAddress: 'alex@example.com',
            avatarUrl: 'https://via.placeholder.com/24',
            active: true
        },
        priority: { name: 'Lowest', id: '5' },
        duedate: '2024-12-20',
        created: '2024-01-17T11:00:00.000Z',
        updated: '2024-01-17T11:00:00.000Z'
    },
    {
        id: '10005',
        key: 'SCRUM-5',
        summary: '–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é',
        status: 'To Do',
        assignee: null,
        priority: { name: 'Lowest', id: '5' },
        duedate: '2024-12-22',
        created: '2024-01-18T09:00:00.000Z',
        updated: '2024-01-18T09:00:00.000Z'
    },
    {
        id: '10006',
        key: 'SCRUM-6',
        summary: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD pipeline',
        status: 'In Progress',
        assignee: {
            accountId: 'user1',
            displayName: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
            emailAddress: 'ivan@example.com',
            avatarUrl: 'https://via.placeholder.com/24',
            active: true
        },
        priority: { name: 'High', id: '2' },
        duedate: null,
        created: '2024-01-19T10:00:00.000Z',
        updated: '2024-01-20T11:00:00.000Z'
    },
    {
        id: '10007',
        key: 'SCRUM-7',
        summary: '–î–æ–±–∞–≤–∏—Ç—å unit —Ç–µ—Å—Ç—ã',
        status: 'To Do',
        assignee: {
            accountId: 'user2',
            displayName: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
            emailAddress: 'maria@example.com',
            avatarUrl: 'https://via.placeholder.com/24',
            active: true
        },
        priority: { name: 'Medium', id: '3' },
        duedate: '2024-12-30',
        created: '2024-01-20T09:00:00.000Z',
        updated: '2024-01-20T09:00:00.000Z'
    },
    {
        id: '10008',
        key: 'SCRUM-8',
        summary: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        status: 'To Do',
        assignee: {
            accountId: 'user4',
            displayName: '–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
            emailAddress: 'elena@example.com',
            avatarUrl: 'https://via.placeholder.com/24',
            active: true
        },
        priority: { name: 'Low', id: '4' },
        duedate: null,
        created: '2024-01-21T14:00:00.000Z',
        updated: '2024-01-21T14:00:00.000Z'
    },
    {
        id: '10010',
        key: 'SCRUM-10',
        summary: '–í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ï–ª–µ–Ω—ã',
        status: 'In Progress',
        assignee: {
            accountId: 'user4',
            displayName: '–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
            emailAddress: 'elena@example.com',
            avatarUrl: 'https://via.placeholder.com/24',
            active: true
        },
        priority: { name: 'Medium', id: '3' },
        duedate: null,
        created: '2024-01-23T10:00:00.000Z',
        updated: '2024-01-23T10:00:00.000Z'
    },
    {
        id: '10009',
        key: 'SCRUM-9',
        summary: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–≥',
        status: 'To Do',
        assignee: null,
        priority: { name: 'Highest', id: '1' },
        duedate: '2024-12-18',
        created: '2024-01-22T16:00:00.000Z',
        updated: '2024-01-22T16:00:00.000Z'
    }
];

const mockUsers: JiraUser[] = [
    {
        accountId: 'user1',
        displayName: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
        emailAddress: 'ivan@example.com',
        avatarUrl: 'https://via.placeholder.com/24',
        active: true
    },
    {
        accountId: 'user2',
        displayName: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
        emailAddress: 'maria@example.com',
        avatarUrl: 'https://via.placeholder.com/24',
        active: true
    },
    {
        accountId: 'user3',
        displayName: '–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤',
        emailAddress: 'alex@example.com',
        avatarUrl: 'https://via.placeholder.com/24',
        active: true
    },
    {
        accountId: 'user4',
        displayName: '–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
        emailAddress: 'elena@example.com',
        avatarUrl: 'https://via.placeholder.com/24',
        active: true
    },
    {
        accountId: 'user5',
        displayName: '–î–º–∏—Ç—Ä–∏–π –ù–æ–≤–∏–∫–æ–≤',
        emailAddress: 'dmitry@example.com',
        avatarUrl: 'https://via.placeholder.com/24',
        active: false
    }
];

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function getMockData(functionName: string, payload?: any): any {
    console.log(`üé≠ Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${functionName}`);

    switch (functionName) {
        case 'getProjectIssues':
            return {
                success: true,
                data: [...mockIssues], // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                projectKey: currentProjectKey || 'SCRUM'
            } as ProjectIssuesResponse;

        case 'getProjectUsers':
            return {
                success: true,
                data: [...mockUsers] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            } as ApiResponse<JiraUser[]>;

        case 'updateIssueAssignee':
            // –û–±–Ω–æ–≤–ª—è–µ–º mock –¥–∞–Ω–Ω—ã–µ
            if (payload?.issueKey && payload?.accountId) {
                const issueIndex = mockIssues.findIndex(issue => issue.key === payload.issueKey);
                const user = mockUsers.find(user => user.accountId === payload.accountId);

                if (issueIndex !== -1 && user) {
                    mockIssues[issueIndex] = {
                        ...mockIssues[issueIndex],
                        assignee: user,
                        updated: new Date().toISOString()
                    };
                    console.log(`üé≠ Mock: –ù–∞–∑–Ω–∞—á–µ–Ω ${user.displayName} –Ω–∞ –∑–∞–¥–∞—á—É ${payload.issueKey}`);
                }
            }
            return {
                success: true,
                message: `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ ${payload?.issueKey}`
            } as ApiResponse<void>;

        case 'updateIssuePriority':
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ mock –¥–∞–Ω–Ω—ã—Ö
            if (payload?.issueKey && payload?.priorityId) {
                const issueIndex = mockIssues.findIndex(issue => issue.key === payload.issueKey);
                if (issueIndex !== -1) {
                    const priorityNames: { [key: string]: string } = {
                        '1': 'Highest',
                        '2': 'High',
                        '3': 'Medium',
                        '4': 'Low',
                        '5': 'Lowest'
                    };

                    mockIssues[issueIndex] = {
                        ...mockIssues[issueIndex],
                        priority: {
                            id: payload.priorityId,
                            name: priorityNames[payload.priorityId] || 'Medium'
                        },
                        updated: new Date().toISOString()
                    };
                    console.log(`üé≠ Mock: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ ${payload.issueKey} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${priorityNames[payload.priorityId]}`);
                }
            }
            return {
                success: true,
                message: `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ ${payload?.issueKey}`
            } as ApiResponse<void>;

        case 'autoAssignUnassigned':
            // –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ mock –¥–∞–Ω–Ω—ã—Ö
            const unassignedIssues = mockIssues.filter(issue => !issue.assignee);
            const activeUsers = mockUsers.filter(user => user.active);
            const results = [];

            for (const issue of unassignedIssues) {
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const availableUsers = activeUsers.filter(user => {
                    const assignedCount = mockIssues.filter(i =>
                        i.assignee && i.assignee.accountId === user.accountId
                    ).length;
                    return assignedCount < 2;
                });

                if (availableUsers.length > 0) {
                    const randomUser = availableUsers[Math.floor(Math.random() * availableUsers.length)];
                    const issueIndex = mockIssues.findIndex(i => i.key === issue.key);

                    if (issueIndex !== -1) {
                        mockIssues[issueIndex] = {
                            ...mockIssues[issueIndex],
                            assignee: randomUser,
                            updated: new Date().toISOString()
                        };

                        results.push({
                            issueKey: issue.key,
                            assignedTo: randomUser.displayName,
                            success: true
                        });
                        console.log(`üé≠ Mock: –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ${randomUser.displayName} –Ω–∞ ${issue.key}`);
                    }
                } else {
                    results.push({
                        issueKey: issue.key,
                        success: false,
                        error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
                    });
                }
            }

            const successCount = results.filter(r => r.success).length;
            return {
                success: true,
                results: results,
                summary: `–ù–∞–∑–Ω–∞—á–µ–Ω–æ ${successCount} –∏–∑ ${unassignedIssues.length} –∑–∞–¥–∞—á`
            } as AutoAssignResponse;

        case 'getProjects':
            return {
                success: true,
                data: [
                    {
                        id: '10000',
                        key: 'SCRUM',
                        name: 'Scrum Project',
                        projectTypeKey: 'software'
                    },
                    {
                        id: '10001',
                        key: 'KANBAN',
                        name: 'Kanban Board',
                        projectTypeKey: 'software'
                    },
                    {
                        id: '10002',
                        key: 'SUPPORT',
                        name: 'Support Desk',
                        projectTypeKey: 'service_desk'
                    }
                ] as JiraProject[]
            } as ApiResponse<JiraProject[]>;

        default:
            return {
                success: false,
                error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: ${functionName}`
            } as ApiResponse<never>;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API
export const JiraAPI = {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
    async initialize(): Promise<boolean> {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JiraAPI...');
        await initializeContext();
        console.log('‚úÖ JiraAPI –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
        return true;
    },

    // –°–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    setCurrentProject(projectKey: string): string {
        console.log(`üîÑ –°–º–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞: ${projectKey}`);
        currentProjectKey = projectKey;
        return currentProjectKey;
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    getCurrentProject(): string | null {
        return currentProjectKey;
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞
    async getProjectIssues(): Promise<ProjectIssuesResponse> {
        try {
            if (!currentProjectKey) {
                await initializeContext();
            }

            const jql = `project = ${currentProjectKey} ORDER BY created DESC`;

            const data = await makeJiraRequest<JiraSearchResponse>('/rest/api/3/search', {
                method: 'POST',
                body: JSON.stringify({
                    jql: jql,
                    fields: [
                        'summary',
                        'status',
                        'assignee',
                        'priority',
                        'duedate',
                        'created',
                        'updated'
                    ],
                    maxResults: 100
                })
            });

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            const issues: JiraIssue[] = data.issues.map(issue => ({
                id: issue.id,
                key: issue.key,
                summary: issue.fields.summary,
                status: issue.fields.status.name,
                assignee: issue.fields.assignee ? {
                    accountId: issue.fields.assignee.accountId,
                    displayName: issue.fields.assignee.displayName,
                    emailAddress: issue.fields.assignee.emailAddress,
                    avatarUrl: issue.fields.assignee.avatarUrls['24x24'],
                    active: true
                } : null,
                priority: {
                    name: issue.fields.priority.name,
                    id: issue.fields.priority.id
                },
                duedate: issue.fields.duedate,
                created: issue.fields.created,
                updated: issue.fields.updated
            }));

            return {
                success: true,
                data: issues,
                projectKey: currentProjectKey || undefined
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ:', error);
            return getMockData('getProjectIssues') as ProjectIssuesResponse;
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
    async getProjectUsers(): Promise<ApiResponse<JiraUser[]>> {
        try {
            if (!currentProjectKey) {
                await initializeContext();
            }

            const users = await makeJiraRequest<JiraUserResponse[]>(`/rest/api/3/user/assignable/search?project=${currentProjectKey}&maxResults=50`);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            const formattedUsers: JiraUser[] = users.map(user => ({
                accountId: user.accountId,
                displayName: user.displayName,
                emailAddress: user.emailAddress,
                avatarUrl: user.avatarUrls['24x24'],
                active: user.active
            }));

            return {
                success: true,
                data: formattedUsers
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ:', error);
            return getMockData('getProjectUsers') as ApiResponse<JiraUser[]>;
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    async getProjects(): Promise<ApiResponse<JiraProject[]>> {
        try {
            const data = await makeJiraRequest<JiraProjectResponse>('/rest/api/3/project/search?maxResults=50');

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            const projects: JiraProject[] = data.values.map(project => ({
                id: project.id,
                key: project.key,
                name: project.name,
                projectTypeKey: project.projectTypeKey
            }));

            return {
                success: true,
                data: projects
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ:', error);
            return getMockData('getProjects') as ApiResponse<JiraProject[]>;
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
    async updateIssueAssignee(issueKey: string, accountId: string): Promise<ApiResponse<void>> {
        try {
            await makeJiraRequest(`/rest/api/3/issue/${issueKey}/assignee`, {
                method: 'PUT',
                body: JSON.stringify({
                    accountId: accountId
                })
            });

            return {
                success: true,
                message: `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ ${issueKey}`
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock:', error);
            return getMockData('updateIssueAssignee', { issueKey, accountId }) as ApiResponse<void>;
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏
    async updateIssuePriority(issueKey: string, priorityId: string): Promise<ApiResponse<void>> {
        try {
            await makeJiraRequest(`/rest/api/3/issue/${issueKey}`, {
                method: 'PUT',
                body: JSON.stringify({
                    fields: {
                        priority: {
                            id: priorityId
                        }
                    }
                })
            });

            return {
                success: true,
                message: `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ ${issueKey}`
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock:', error);
            return getMockData('updateIssuePriority', { issueKey, priorityId }) as ApiResponse<void>;
        }
    },

    // –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á (—Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    async autoAssignUnassigned(): Promise<AutoAssignResponse> {
        try {
            if (!currentProjectKey) {
                await initializeContext();
            }

            // 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            const jql = `project = ${currentProjectKey} AND assignee is EMPTY`;
            const issuesData = await makeJiraRequest<JiraSearchResponse>('/rest/api/3/search', {
                method: 'POST',
                body: JSON.stringify({
                    jql: jql,
                    fields: ['key'],
                    maxResults: 50
                })
            });

            const unassignedIssues = issuesData.issues;

            if (unassignedIssues.length === 0) {
                return {
                    success: true,
                    message: '–ù–µ—Ç –∑–∞–¥–∞—á –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
                };
            }

            // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
            const users = await makeJiraRequest<JiraUserResponse[]>(`/rest/api/3/user/assignable/search?project=${currentProjectKey}&maxResults=20`);

            // 3. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            const allIssuesJql = `project = ${currentProjectKey}`;
            const allIssuesData = await makeJiraRequest<JiraSearchResponse>('/rest/api/3/search', {
                method: 'POST',
                body: JSON.stringify({
                    jql: allIssuesJql,
                    fields: ['assignee'],
                    maxResults: 200
                })
            });

            // 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É –∫–æ–≥–æ –º–µ–Ω—å—à–µ 2 –∑–∞–¥–∞—á)
            const activeUsers = users.filter(user => {
                if (!user.active) return false;

                const assignedCount = allIssuesData.issues.filter(issue =>
                    issue.fields.assignee && issue.fields.assignee.accountId === user.accountId
                ).length;

                return assignedCount < 2; // –î–æ—Å—Ç—É–ø–µ–Ω –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 2 –∑–∞–¥–∞—á
            });

            if (activeUsers.length === 0) {
                return {
                    success: false,
                    error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–≤—Å–µ –∏–º–µ—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É 2/2 –∑–∞–¥–∞—á–∏)'
                };
            }

            // 5. –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å–ª—É—á–∞–π–Ω—ã–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            const results = [];
            for (const issue of unassignedIssues) {
                const randomUser = activeUsers[Math.floor(Math.random() * activeUsers.length)];

                try {
                    await makeJiraRequest(`/rest/api/3/issue/${issue.key}/assignee`, {
                        method: 'PUT',
                        body: JSON.stringify({
                            accountId: randomUser.accountId
                        })
                    });

                    results.push({
                        issueKey: issue.key,
                        assignedTo: randomUser.displayName,
                        success: true
                    });

                } catch (error) {
                    results.push({
                        issueKey: issue.key,
                        success: false,
                        error: error instanceof Error ? error.message : 'Unknown error'
                    });
                }
            }

            const successCount = results.filter(r => r.success).length;

            return {
                success: true,
                results: results,
                summary: `–ù–∞–∑–Ω–∞—á–µ–Ω–æ ${successCount} –∏–∑ ${unassignedIssues.length} –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º`
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock:', error);
            return getMockData('autoAssignUnassigned') as AutoAssignResponse;
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
JiraAPI.initialize();

export default JiraAPI;